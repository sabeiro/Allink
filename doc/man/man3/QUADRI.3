.TH "Quadri" 3 "Thu Mar 27 2014" "Version v0.1" "Allink" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Quadri \- 
.PP
Quaternion class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <MatematicaQuadri\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQuadri\fP ()"
.br
.RI "\fIAn empty quaternion\&. \fP"
.ti -1c
.RI "\fBQuadri\fP (double *\fBAxis\fP, double \fBAngle\fP)"
.br
.RI "\fIA quaternion generated from an axis and an angle\&. \fP"
.ti -1c
.RI "\fBQuadri\fP (double Ang1, double Ang2, double Ang3)"
.br
.RI "\fIA quaternion generated form Euler's angle\&. \fP"
.ti -1c
.RI "\fBQuadri\fP (double ww, double xx, double yy, double zz)"
.br
.RI "\fIA quaternion generated specifying the basis\&. \fP"
.ti -1c
.RI "double * \fBAxis\fP ()"
.br
.RI "\fIPrint the component of the axis\&. \fP"
.ti -1c
.RI "double \fBNorm\fP ()"
.br
.RI "\fINorm of the quaternion\&. \fP"
.ti -1c
.RI "double \fBNormInv\fP (double *Vett)"
.br
.RI "\fIInverse norm of a 3d-vector\&. \fP"
.ti -1c
.RI "double \fBSqr\fP ()"
.br
.RI "\fISquare of a quaternion\&. \fP"
.ti -1c
.RI "double \fBNormalize\fP ()"
.br
.RI "\fINormalize a quaternion\&. \fP"
.ti -1c
.RI "double \fBNormalize\fP (double *Vett)"
.br
.RI "\fINormalize a vector\&. \fP"
.ti -1c
.RI "double \fBAngle\fP ()"
.br
.RI "\fIReturn the rotation angle\&. \fP"
.ti -1c
.RI "void \fBProd\fP (\fBQuadri\fP q)"
.br
.RI "\fIProduct between two quaternions\&. \fP"
.ti -1c
.RI "\fBQuadri\fP \fBProd\fP (\fBQuadri\fP q, \fBQuadri\fP p)"
.br
.RI "\fIProduct between two quaternions\&. \fP"
.ti -1c
.RI "\fBQuadri\fP \fBGetConj\fP ()"
.br
.RI "\fIGive the conjugate\&. \fP"
.ti -1c
.RI "void \fBInv\fP ()"
.br
.RI "\fIInverse\&. \fP"
.ti -1c
.RI "void \fBMatrix4x4\fP (double *M)"
.br
.RI "\fICreate a 4x4 rotation matrix\&. \fP"
.ti -1c
.RI "void \fBMatrix3x3\fP (double *M)"
.br
.RI "\fICreate a 3x3 rotation matrix\&. \fP"
.ti -1c
.RI "void \fBRotMatrix\fP (double *data, int dim)"
.br
.RI "\fIAlternative creation of a rotation matrix\&. \fP"
.ti -1c
.RI "void \fBBasis\fP (double a, double b, double c, double d, double *Matr)"
.br
.RI "\fIBoh\&. \fP"
.ti -1c
.RI "void \fBConj\fP ()"
.br
.RI "\fIConjugate\&. \fP"
.ti -1c
.RI "void \fBPrintMatrix\fP (double *M)"
.br
.RI "\fIPrint a rotation matrix\&. \fP"
.ti -1c
.RI "\fBQuadri\fP \fBoperator*\fP (const \fBQuadri\fP &rq) const "
.br
.RI "\fIScalar product with a quaternion\&. \fP"
.ti -1c
.RI "double * \fBoperator*\fP (const double *Vet) const "
.br
.RI "\fIScalar product with a vector\&. \fP"
.ti -1c
.RI "\fBQuadri\fP \fBoperator=\fP (const \fBQuadri\fP &rq) const "
.br
.RI "\fIEqual operator\&. \fP"
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "double \fBx\fP"
.br
.RI "\fIFirst basis component\&. \fP"
.ti -1c
.RI "double \fBy\fP"
.br
.RI "\fISecond basis component\&. \fP"
.ti -1c
.RI "double \fBz\fP"
.br
.RI "\fIThird basis component\&. \fP"
.ti -1c
.RI "double \fBw\fP"
.br
.RI "\fIForth basis component\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Quaternion class\&. 
.PP
Definition at line 7 of file MatematicaQuadri\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Allink from the source code\&.
